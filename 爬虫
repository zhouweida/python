# 1.urllib
- 包含模块
    - urllib.request;打开和读取url
    - urllib.error:包含urllib.request产生的常见错误，使用try捕捉
    - urllib.parse;包含解析url的方法
    - urllib.robotparse:解析robot.txt文件
    - 案例v1

- 网页编码问题解决
    - chardet 可以自动检测页面文件的编码格式，但是可能有误
    - 需要安装，canda install chardet
    - 案例v2

- urlopen的返回对象
    - 案例v3
    - geturl;返回请求对象的url
    - info;请求反馈对象的meta信息
    - getcode;返回http code()

- request.date的使用
    - 访问网络的两种方法
        - get
            - 利用参数给服务器传递信息
            - 参数为dict（字典），然后用parse编码
            - 案例v4
        - post
            - 一般向服务器传递参数使用
            - post是把信息自动加密处理
            - 我们如果想使用post信息，需要用到data参数
            - 使用post，意味着Http的请求头可能需要更改
                - Content-Type：application/x-www.from-urlencode
                - Contene-Length：数据长度
                - 简而言之，一旦更改请求方法，请注意其他请求头部信息相适应
            - urllib。parse。urlencode可以将字符串自动转换成上面的
            - 案例v5
            - 为了更多的设置请求信息，单纯的通过urlopen函数已经不太好用了
            - 需要利用request.Request类
            - 案例v6

- urllib.error
    - URLError产生的原因：
        - 没网
        - 服务器连接失败
        - 不知道指定服务器
        - 是OSError的子类
        - 案例v7
    - HTTPError,是URLError的一个子类
        - 案例v8
    - 两者的区别：
        - HTTPError是对应的HTTP请求的返回码错误，如果返回错误码是400以上的，则引发HTTPError
        - URLError对应的一般是网络出现问题，包括url问题
        - 关系区别：OSError-URLError-HTTPError

- UserAgent
    - UserAgent： 用户代理，简称ua，属于heads的一部分，服务器通过ua来判断访问者身份
    - 常见的UA值，使用的时候可以直接复制粘贴，也可以用浏览器访问的时候抓包
    - 设置UA可以通过两种方式：
        - heads
        - add_header
        - 案例v9

- ProxyHandler处理（代理服务器）
    - 使用代理ip，是爬虫的常见手段
    - 获取代理服务器的地址：
        - www.xicidaili.com
        - www.goubanjia.com
    - 基本使用步骤：
        - 1.设置代理地址
        - 2.创建ProxyHandler
        - 3.创建Opener
        - 4.安装Opener
    -案例v10

- cookie 和 session
    - 由于http协议的无记忆性，人们为了弥补这个缺点，所采用的一个补充协议
    - cookie是发放给用户（即http浏览器）的一段信息，session是保存在服务器上的对应的另一端信息，用来记录用户信息的

- cookie 和 session的区别
    - 存放位置不同
    - cookie不安全
    - session会保存在服务器上一段时间
    - 单个cookie保存数据不超过4k，很多浏览器限制一个站点最多保存20个

- session的保存位置
    - 存在服务器端
    - 一般情况下，session是放在内存中或者数据库中
    - 没有cookie登录 案例v11 可以看到，没有使用cookie则反馈回来的网页为未登录状态

- 使用cookie登录
    - 直接把cookie复制下来，然后手动放入，案例v12
    - http模块包含一些关于cookie的模块，通过他们我们可以自动使用cookie
        - CookieJar
            - 管理存储cookie，向传出的http请求添加cookie
            - cookie存储在内存中，CookieJar实例回收后cookie将消失
        - FileCookieJar（filename, delayload = None, policy = None）:
            - 使用文件管理cookie
            - filemane 是保存cookie的文件
        - MozillaCookieJar（filename, delayload = None, policy = None）:
            - 创建与mozilla浏览器cookie.txt兼容的FileCookieJar实例
        - LwpCookieJar（filename, delayload = None, policy = None）:
            - 创建与libwww-perl标准兼容的Set-Cookie3格式的FileCookieJar实例
        - 他们的关系是 CookieJar --> FileCookieJar --> MozillaCookie & LwpCookieJar
    - 利用cookiejar访问人人，案例v13
        - 自动使用cookie登录，大致流程是
        - 打开登录页面后自动通过用户名和密码登录
        - 自动提取反馈回来的cookie
        - 利用提取的cookie登录隐私页面
    - handler是Handler的实例，常用参看案例代码
        -用来处理复杂请求
            # 生成cookie的管理器
            cookie_handler =request.HTTPCookieProcessor(cookie)
            # 创建http请求管理器
            http_handler = request.HTTPHandler()
            # 创建https管理器
            https_handler = request.HTTPSHandler()
    - 创建handler后，使用opener打开，打开后相应的业务由相应的handler处理
    - cookie作为一个变量，打印出来，v14
        - cookie的属性
            - name:名称
            - value:值
            - domain:可以访问此cookie的域名
            - path:可以访问此cookie的页面路径
            - expires:过期时间
            - size:大小
            - http字段
    - cookie的保存-FileCookieJar,案例v15
    - cookie的读取，案例v16

- SSL
    - SSL证书就是指遵守SSL安全套阶层协议的服务器数字证书（SercureSocketLayer）
    - 美国网景公司开发
    - CA（CertifacateAuthority）是数字证书认证中心，是发放，管理，废除数字证书的收信人的第三方机构
    - 遇到不信任的SSL证书，需要单独处理，案例v17